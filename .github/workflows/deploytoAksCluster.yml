on: [push]

env:
  SYSDIG_SECURE_URL: "https://us2.app.sysdig.com"
  REGISTRY_NAME: "azsysdigcr"
  CLUSTER_NAME: "azure-cluster"
  CLUSTER_RESOURCE_GROUP: "Sysdig-Azure-RG"
  NAMESPACE: "app-ns"
  IMAGE_PULL_SECRET: "go-hello-world-dockerauth"
  APP_NAME: "go-hello-world"

jobs:
  # build:
  #   runs-on: ubuntu-latest
  #   steps: 
  #   - name: Checkout Code
  #     uses: actions/checkout@master

  #   - name: Docker Setup Buildx
  #     uses: docker/setup-buildx-action@v2.0.0

  #   - name: Build Docker Image
  #     uses: docker/build-push-action@v3.0.0
  #     with:
  #       context: .
  #       file: ./Dockerfile
  #       tags: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
  #       outputs: type=docker,dest=/tmp/image.tar
      
  #   - name: Upload Build Artifact
  #     uses: actions/upload-artifact@v3.1.0
  #     with:
  #       name: image
  #       path: /tmp/image.tar

  # inline-scan:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps: 
  #   - name: Download Build Artifact
  #     uses: actions/download-artifact@v3.0.0
  #     with:
  #       name: image
  #       path: /tmp

  #   - name: Scan image
  #     id: scan
  #     uses: sysdiglabs/scan-action@v3
  #     with:
  #       image-tag: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
  #       sysdig-secure-token: ${{ secrets.SYSDIG_SECURE_TOKEN }}
  #       sysdig-secure-url: ${{ env.SYSDIG_SECURE_URL }}
  #       input-type: docker-archive
  #       input-path: /tmp/image.tar

  #   - name: Upload Sarif Report
  #     uses: github/codeql-action/upload-sarif@v1
  #     if: always()
  #     with:
  #       sarif_file: ${{ steps.scan.outputs.sarifReport }}

  # push:
  #     runs-on: ubuntu-latest
  #     needs: [build,inline-scan]
  #     steps:
  #     - name: Login to Azure
  #       uses: azure/login@v1
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS }}

  #     - name: Create ACR
  #       id: create-acr
  #       run: |
  #         az acr create -n azsysdigcr -g azsysdigcrbe0b-rg --location "West Central US" --sku Standard --admin-enabled
  #         echo "::set-output name=acr_username::`az acr credential show -n azsysdigcr --query username | xargs`"
  #         echo "::set-output name=acr_password::`az acr credential show -n azsysdigcr --query passwords[0].value | xargs`"
  #         echo "::add-mask::`az acr credential show -n azsysdigcr --query passwords[0].value | xargs`"

  #     - name: Login to ACR
  #       uses: azure/docker-login@v1
  #       with:
  #         login-server: azsysdigcr.azurecr.io
  #         username: ${{ steps.create-acr.outputs.acr_username }}
  #         password: ${{ steps.create-acr.outputs.acr_password }}
    
  #     - name: Download a Build Artifact
  #       uses: actions/download-artifact@v3.0.0
  #       with:
  #         name: image
  #         path: /tmp
      
  #     - name: Load Docker image
  #       run: |
  #         docker load --input /tmp/image.tar
  #         docker push ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    #needs: [build, inline-scan, push]
    steps:
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Set AKS Cluster Context
      uses: azure/aks-set-context@v1
      with:
        #creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: ${{ env.CLUSTER_NAME }}
        resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}

    - name: Create namespace
      run: |
        namespacePresent=`kubectl get namespace | grep ${{ env.NAMESPACE }} | wc -l`
        if [ $namespacePresent -eq 0 ]
        then
            echo `kubectl create namespace ${{ env.NAMESPACE }}`
        fi

    # - name: Create Image Pull Secret
    #   uses: azure/k8s-create-secret@v1
    #   with:
    #     namespace: ${{ env.NAMESPACE }}
    #     container-registry-url: ${{ env.REGISTRY_NAME }}.azurecr.io
    #     container-registry-username: ${{ steps.create-acr.outputs.acr_username }}
    #     container-registry-password: ${{ steps.create-acr.outputs.acr_password }}
    #     secret-name: ${{ env.IMAGE_PULL_SECRET }}

    # - name: Replace Image
    #   run: |
    #     sed -i 's/BUILT_IMAGE/${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}/g' manifests/deployment.yml

    # - name: Deploy to AKS
    #   uses: azure/k8s-deploy@v1.2
    #   with:
    #     namespace: ${{ env.NAMESPACE }}
    #     manifests: |
    #       manifests/deployment.yml
    #       manifests/service.yml
    #     images: |
    #       ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
    #     imagepullsecrets: |
    #       ${{ env.IMAGE_PULL_SECRET }}