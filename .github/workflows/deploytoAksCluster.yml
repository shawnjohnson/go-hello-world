on: [push]

env:
  IMAGE_NAME: "azsysdigcr.azurecr.io/go-hello-world"
  SYSDIG_SECURE_URL: "https://us2.app.sysdig.com"

jobs:
  build:
    runs-on: ubuntu-latest
    steps: 
    - name: Checkout Code
      uses: actions/checkout@master

    # - name: Build the Docker image
    #   id: build-image
    #   run: |
    #     docker build "$GITHUB_WORKSPACE/" -f  "Dockerfile" -t ${{ env.IMAGE_NAME }}:${{ github.sha }} --label dockerfile-path=Dockerfile
    - name: Docker Setup Buildx
      uses: docker/setup-buildx-action@v2.0.0

    - name: Build Docker Image
      uses: docker/build-push-action@v3.0.0
      with:
        context: .
        file: ./Dockerfile
        tags: ${{ env.IMAGE_NAME }}:${{ github.sha }}
        outputs: type=docker,dest=/tmp/image.tar
      
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v3.1.0
      with:
        name: image
        path: /tmp/image.tar

  inline-scan:
    runs-on: ubuntu-latest
    needs: build
    steps: 
    - name: Download a Build Artifact
      uses: actions/download-artifact@v3.0.0
      with:
        name: image
        path: /tmp
    
    - name: Load Docker image
      run: |
        docker load --input /tmp/image.tar
        docker image ls -a

    - name: Scan image
      id: scan
      uses: sysdiglabs/scan-action@v3
      with:
        image-tag: ${{ env.IMAGE_NAME }}:${{ github.sha }}
        sysdig-secure-token: ${{ secrets.SYSDIG_SECURE_TOKEN }}
        sysdig-secure-url: ${{ env.SYSDIG_SECURE_URL }}
        input-type: docker-archive
        input-path: /tmp/image.tar

    - name: Upload Sarif Report
      uses: github/codeql-action/upload-sarif@v1
      if: always()
      with:
        sarif_file: ${{ steps.scan.outputs.sarifReport }}

  push:
      runs-on: ubuntu-latest
      needs: [build,inline-scan]
      steps:
      - uses: azure/login@v1
        name: Login to Azure
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create ACR
        id: create-acr
        run: |
          az acr create -n azsysdigcr -g azsysdigcrbe0b-rg --location "West Central US" --sku Standard --admin-enabled
          echo "::set-output name=acr_username::`az acr credential show -n azsysdigcr --query username | xargs`"
          echo "::set-output name=acr_password::`az acr credential show -n azsysdigcr --query passwords[0].value | xargs`"
          echo "::add-mask::`az acr credential show -n azsysdigcr --query passwords[0].value | xargs`"

      - uses: azure/docker-login@v1
        with:
          login-server: azsysdigcr.azurecr.io
          username: ${{ steps.create-acr.outputs.acr_username }}
          password: ${{ steps.create-acr.outputs.acr_password }}
    
      - name: Download a Build Artifact
        uses: actions/download-artifact@v3.0.0
        with:
          name: image
          path: /tmp
      
      - name: Load Docker image
        run: |
          docker load --input /tmp/image.tar
          docker push ${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: [build, inline-scan, push]
    steps:
    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # - name: Create ACR
    #   id: create-acr
    #   run: |
    #     az acr create -n azsysdigcr -g azsysdigcrbe0b-rg --location "West Central US" --sku Standard --admin-enabled
    #     echo "::set-output name=acr_username::`az acr credential show -n azsysdigcr --query username | xargs`"
    #     echo "::set-output name=acr_password::`az acr credential show -n azsysdigcr --query passwords[0].value | xargs`"
    #     echo "::add-mask::`az acr credential show -n azsysdigcr --query passwords[0].value | xargs`"

    # - uses: azure/docker-login@v1
    #   with:
    #     login-server: azsysdigcr.azurecr.io
    #     username: ${{ steps.create-acr.outputs.acr_username }}
    #     password: ${{ steps.create-acr.outputs.acr_password }}

    # - name: Build and push image to ACR
    #   id: build-image
    #   run: |
    #     docker build "$GITHUB_WORKSPACE/" -f  "Dockerfile" -t azsysdigcr.azurecr.io/go-hello-world:${{ github.sha }} --label dockerfile-path=Dockerfile
    #     docker push azsysdigcr.azurecr.io/go-hello-world:${{ github.sha }}
    
    # - uses: azure/k8s-set-context@v1
    #   id: login
    #   with:
    #      kubeconfig: ${{ secrets.aks_go-hello-world_kubeConfig }}
    
    # - name: Create namespace
    #   run: |
    #     namespacePresent=`kubectl get namespace | grep app-ns | wc -l`
    #     if [ $namespacePresent -eq 0 ]
    #     then
    #         echo `kubectl create namespace app-ns`
    #     fi

    # - uses: azure/k8s-create-secret@v1
    #   with:
    #     namespace: app-ns
    #     container-registry-url: azsysdigcr.azurecr.io
    #     container-registry-username: ${{ steps.create-acr.outputs.acr_username }}
    #     container-registry-password: ${{ steps.create-acr.outputs.acr_password }}
    #     secret-name: go-hello-worlddockerauth
       
    # - uses: azure/k8s-deploy@v1.2
    #   with:
    #     namespace: app-ns
    #     manifests: |
    #       manifests/deployment.yml
    #       manifests/service.yml
    #     images: |
    #       azsysdigcr.azurecr.io/go-hello-world:${{ github.sha }}
    #     imagepullsecrets: |
    #       go-hello-worlddockerauth   